{"name":"TeaSpawn","tagline":"Take a sip of everything you need from your OS mug","body":"tea-spawn\r\n=========\r\nTake a sip of everything you need from your OS mug\r\n\r\n[![build status](https://secure.travis-ci.org/WebReflection/tea-spawn.png)](http://travis-ci.org/WebReflection/tea-spawn)\r\n\r\n### What\r\n\r\nThe easiest way to spawn a process and read its outcome.\r\n\r\n### How\r\n\r\nThe classic `npm install tea-spawn` will do the magic, an optional `-g` is suggested to reuse anytime the library.\r\n\r\n```javascript\r\nvar TeaSpawn = require('tea-spawn.js');\r\n\r\n// python as runtime interpreter\r\nvar python = new TeaSpawn('python');\r\npython\r\n  .send('print(\"Hello World\")', function (error, output) {\r\n    console.log(output); // Hello World\r\n   })\r\n  .send('print(123)', function (error, output) {\r\n    console.log(output); // 123\r\n  })\r\n;\r\n\r\n// python file\r\nvar python = new TeaSpawn('python', 'test/test.py');\r\npython.send([1, 2, 3], function (error, output) {\r\n  console.log(output); // 1\\n2\\n3\r\n});\r\n```\r\nIn latter example the second argument is used as partial application.\r\nThis means that every `python.send([arg0, arg1, argN])` will be concatenated to the list of arguments producing this call `python test/test.py arg0 arg1 argN` with proper shell arguments escape provided by `spawn` module.\r\n\r\n### API\r\n\r\n  * `TeaSpawn(executable:string[, argument:string|arguments:Array[, env:Object]])`\r\n    The second argument can be either a string or an array with 0, one, or more entries and will be used as partial arguments per each call to the send method.\r\n  \r\n  * `TeaSpawn#send(null|content:string|arguments:Array[, callback:Function]):object`\r\n    every call to this method will create *a new spawned process* with the same initial configuration.\r\n    If the first argument is `null` the process will be executed as it is.\r\n    If the first argument is `string` it will be written in the spawned process stdin.\r\n    If the first argument is a `Array` it will be used as extra arguments and no content will be written to the stdin.\r\n    The second optional argument, if present, will receive `error` and `output` parameters. Error is either a buffered error or the process exit number. If `0` means everything was fine. `output` is the content produced by that call or `null` if none.\r\n    The method returns the instance object itself.\r\n  \r\n  * `TeaSpawn#kill(void):object`\r\n    It kills every process previously started with `.send()` and returns the instance object.\r\n  \r\n  * `TeaSpawn#log(error:Number|StringBuffer, output:null|StringBuffer):object`\r\n    This is simply an utility method handy for runtime operations such `p.send(someArg, p.log)`.\r\n    It will log the error or the output as they come, that's pretty much it.\r\n\r\n### More Examples\r\n\r\n```javascript\r\n// curl (grab a page output)\r\nvar curl = new TeaSpawn(\r\n  'curl',\r\n  ['-L', '-s'] // arguments used per each .send() call\r\n);\r\n\r\n// call send with extra arguments\r\ncurl.send(['http://www.google.com'], curl.log);\r\ncurl.send(['http://www.3site.eu'], curl.log);\r\n\r\n\r\n// detailed list of files\r\nvar ls = new TeaSpawn('ls', ['-la']);\r\nls.send('./', function (error, out) {\r\n  var result = [];\r\n  out.split(/\\r\\n|\\r|\\n/).slice(1, -1).forEach(rowToObject, result);\r\n  console.log(result);\r\n});\r\nfunction rowToObject(row) {\r\n  var cols = row.split(/ +/);\r\n  this.push(    {\r\n    permissions: cols.shift(),\r\n    links: cols.shift(),\r\n    owner: cols.shift(),\r\n    group: cols.shift(),\r\n    size: cols.shift(),\r\n    name: cols.pop(),\r\n    mdate: cols.join(' ')\r\n  });\r\n}\r\n\r\n```\r\n\r\n### Why\r\nSometimes there's no module to do what you need to ... spawn could become really handy as utility/tool for any task you might need.\r\n\r\nIt is also possible to make interoperation easy between programming languages such Python or Java, having stateless programs that can do something per each call without needing a full duplex channel, just the standard output.\r\n\r\nAs summary, if performance is not such big concern keep it simple and go for it!","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}